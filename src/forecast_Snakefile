import glob
import os
from snakemake.io import glob_wildcards
from ... import read_config

CONFIGS = glob.glob("forecast_config/*.yml")
FORECASTS = [read_config(config, "name") for config in CONFIGS]

def get_clusters(forecast):
    # Use glob_wildcards to find the available clusters for the given forecast
    pattern = f"{forecast}/wflow_forecast_{{cluster}}.toml"
    clusters = glob_wildcards(pattern).cluster
    return clusters

rule all:
    input: expand("{forecast}/output.nc", forecast=FORECASTS)

rule postprocess_forecast:
    output: "{forecast}/output.nc"  # one output per forecast
    input:
        lambda wildcards: expand("{forecast}/wflow_output_{cluster}.nc", forecast=wildcards.forecast, cluster=get_clusters(wildcards.forecast))
    script: "postprocess.py"  # make sure this script is Snakemake compatible

rule run_forecast:
    input:
        lambda wildcards: expand("{forecast}/wflow_forecast_{cluster}.toml", forecast=wildcards.forecast, cluster=get_clusters(wildcards.forecast))
    output:
        "{forecast}/wflow_output_{cluster}.nc"
    run:
        if os.path.isfile(f"{wildcards.forecast}/wflow_state_{wildcards.cluster}.toml"):
            shell("julia run_script.jl {wildcards.forecast}/wflow_state_{wildcards.cluster}.toml")
        shell("julia run_script.jl {wildcards.forecast}/wflow_forecast_{wildcards.cluster}.toml")

rule prepare_forecast:
    input:
        "config/{config}.yml"  # one input config
    output:
        lambda wildcards: expand("{forecast}/wflow_forecast_{cluster}.toml", forecast=wildcards.forecast, cluster=get_clusters(wildcards.forecast))
    script:
        "prepare.py"  # make sure this script is Snakemake compatible
